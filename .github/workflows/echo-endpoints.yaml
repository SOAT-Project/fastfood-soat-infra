name: "Echo endpoints"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
    secrets:
      AWS_GITHUB_ACTIONS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ inputs.environment }}-fastfood-eks --region ${{ secrets.AWS_REGION }}

      - name: Check cluster resources
        run: |
          echo "🔍 Verificando recursos do cluster..."
          echo ""
          echo "📦 Namespaces:"
          kubectl get namespaces
          echo ""
          echo "🚀 Deployments no namespace fastfood:"
          kubectl get deployments -n fastfood || echo "⚠️  Nenhum deployment encontrado"
          echo ""
          echo "🐳 Pods no namespace fastfood:"
          kubectl get pods -n fastfood || echo "⚠️  Nenhum pod encontrado"
          echo ""
          echo "🌐 Services no namespace fastfood:"
          kubectl get svc -n fastfood || echo "⚠️  Nenhum service encontrado"

      - name: Debug pod failures
        if: always()
        run: |
          echo "🐛 Investigando falhas nos pods..."
          echo ""
          echo "⏳ Aguardando pods iniciarem (30s)..."
          sleep 30
          echo ""
          echo "🔍 Listando pods no namespace fastfood:"
          kubectl get pods -n fastfood -o wide || true
          echo ""

          echo "📋 Descrição dos pods problemáticos:"
          for pod in $(kubectl get pods -n fastfood --no-headers -o custom-columns=":metadata.name,:status.phase" | grep -v Running | awk '{print $1}'); do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 $pod"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            kubectl describe pod $pod -n fastfood || true
            echo ""
          done

          echo "🧾 Logs dos pods com falha (últimas 50 linhas):"
          for pod in $(kubectl get pods -n fastfood --no-headers -o custom-columns=":metadata.name,:status.phase" | grep -v Running | awk '{print $1}'); do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📦 Logs de $pod"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            if ! kubectl logs $pod -n fastfood --tail=50 2>/dev/null; then
              echo "⚠️ Nenhum log encontrado (pode ter crashado rápido demais ou ainda estar iniciando)."
            fi
            echo ""
          done

          echo "📅 Últimos eventos do namespace:"
          kubectl get events -n fastfood --sort-by=.metadata.creationTimestamp | tail -n 15 || true


      - name: Get LoadBalancer status
        id: lb
        continue-on-error: true
        run: |
          echo "🔍 Buscando endereço do LoadBalancer..."
          
          # Mostra o service completo
          echo "📋 Detalhes do Service:"
          kubectl describe svc fastfood-service -n fastfood || true
          echo ""
          
          # Tenta aguardar por até 3 minutos
          echo "⏳ Aguardando LoadBalancer (timeout: 180s)..."
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress}' \
            service/fastfood-service -n fastfood --timeout=180s || echo "⚠️  Timeout ao aguardar LoadBalancer"
          
          # Tenta pegar hostname (AWS ELB)
          LB_HOST=$(kubectl get svc fastfood-service -n fastfood -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          
          # Se não tiver hostname, tenta pegar IP
          if [ -z "$LB_HOST" ]; then
            LB_HOST=$(kubectl get svc fastfood-service -n fastfood -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          fi
          
          if [ -z "$LB_HOST" ]; then
            echo "❌ LoadBalancer ainda não foi provisionado!"
            echo "LB_HOST=pending" >> $GITHUB_ENV
            echo "LB_READY=false" >> $GITHUB_ENV
          else
            echo "LB_HOST=$LB_HOST" >> $GITHUB_ENV
            echo "LB_READY=true" >> $GITHUB_ENV
            echo "✅ LoadBalancer encontrado: $LB_HOST"
          fi

      - name: Print Endpoints
        if: env.LB_READY == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 ENDPOINTS DO AMBIENTE: ${{ inputs.environment }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📚 Swagger UI:"
          echo "   http://${{ env.LB_HOST }}/api/swagger-ui/index.html"
          echo ""
          echo "❤️  Health Check:"
          echo "   http://${{ env.LB_HOST }}/api/actuator/health"
          echo ""
          echo "🌐 LoadBalancer:"
          echo "   ${{ env.LB_HOST }}"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: LoadBalancer not ready warning
        if: env.LB_READY != 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  LOADBALANCER NÃO PROVISIONADO"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Possíveis causas:"
          echo "1. AWS Load Balancer Controller não está instalado no cluster"
          echo "2. IAM roles/permissions incorretas"
          echo "3. Subnets não tagueadas corretamente"
          echo "4. Security groups bloqueando"
          echo ""
          echo "Para verificar, rode localmente:"
          echo "  kubectl get svc -n fastfood"
          echo "  kubectl describe svc fastfood-service -n fastfood"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Verify endpoints accessibility
        if: env.LB_READY == 'true'
        run: |
          echo "🔎 Verificando acessibilidade dos endpoints..."
          echo "⏳ Aguardando LoadBalancer ficar operacional (pode levar até 3 minutos)..."
          
          # Tenta por até 3 minutos com intervalos de 15 segundos
          for i in {1..12}; do
            sleep 15
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.LB_HOST }}/api/actuator/health 2>/dev/null || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check está respondendo! (tentativa $i)"
              break
            else
              echo "⏳ Aguardando... (tentativa $i/12 - HTTP $HTTP_CODE)"
            fi
          done
          
          # Verifica o resultado final
          FINAL_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.LB_HOST }}/api/actuator/health 2>/dev/null || echo "000")
          if [ "$FINAL_CODE" = "200" ]; then
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "✅ APLICAÇÃO ESTÁ ONLINE E RESPONDENDO!"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          else
            echo ""
            echo "⚠️  Aplicação ainda não está respondendo. Aguarde alguns minutos e tente acessar os endpoints."
          fi