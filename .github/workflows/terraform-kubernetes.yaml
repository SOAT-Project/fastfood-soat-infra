name: "Terraform Kubernetes Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
    secrets:
      AWS_GITHUB_ACTIONS_ROLE_ARN:
        required: true
      AWS_STATEFILE_S3_BUCKET:
        required: true
      AWS_LOCK_DYNAMODB_TABLE:
        required: true
      AWS_REGION:
        required: true
      DB_USERNAME:
        required: true
      DB_PASSWORD:
        required: true
      RDS_ENDPOINT:
        required: true
      MP_TOKEN:
        required: true
      COLLECTOR_ID:
        required: true
      POS_ID:
        required: true

jobs:
  terraform-kubernetes:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Read destroy configuration
        id: read-destroy-config
        run: |
          DESTROY="$(jq -r '.${{ inputs.environment }}' ./destroy_config.json)"
          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: cd kubernetes && terraform init -backend-config="bucket=${{ secrets.AWS_STATEFILE_S3_BUCKET }}" -backend-config="key=kubernetes/${{ inputs.environment }}.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="dynamodb_table=${{ secrets.AWS_LOCK_DYNAMODB_TABLE }}"

      - name: Terraform Validate
        run: cd kubernetes && terraform validate

      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        run: cd kubernetes && terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} && terraform destroy -var="prefix=${{ inputs.environment }}" -var="db_username=${{ secrets.DB_USERNAME }}" -var="db_password=${{ secrets.DB_PASSWORD }}" -var="rds_endpoint=${{ secrets.RDS_ENDPOINT }}" -var="mp_token=${{ secrets.MP_TOKEN }}" -var="collector_id=${{ secrets.COLLECTOR_ID }}" -var="pos_id=${{ secrets.POS_ID }}" -auto-approve

      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        run: cd kubernetes && terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} && terraform plan -var="prefix=${{ inputs.environment }}" -var="db_username=${{ secrets.DB_USERNAME }}" -var="db_password=${{ secrets.DB_PASSWORD }}" -var="rds_endpoint=${{ secrets.RDS_ENDPOINT }}" -var="mp_token=${{ secrets.MP_TOKEN }}" -var="collector_id=${{ secrets.COLLECTOR_ID }}" -var="pos_id=${{ secrets.POS_ID }}" -out="${{ inputs.environment }}.plan"

      - name: Terraform Apply
        if: steps.read-destroy-config.outputs.destroy != 'true'
        run: cd kubernetes && terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} && terraform apply "${{ inputs.environment }}.plan"